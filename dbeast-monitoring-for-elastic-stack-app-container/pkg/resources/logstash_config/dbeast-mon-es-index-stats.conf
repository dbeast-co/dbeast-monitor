input{
  http_poller {
    id => "Input-get-cat-indices-from-ES" 
    urls => {
      lab => "<PROD_HOST>/_cat/indices?bytes=b&time=ms&format=json&h=*"
    }
	user => "<PROD_USER>"
	password => "<PROD_PASSWORD>"
	
    request_timeout => 60
    schedule => { "cron" => "* * * * *"}
    codec => "json"
    ssl_verification_mode => "none"
    add_field => {
	  "[elasticsearch][cluster][id]" => "<CLUSTER_ID>"
	  "[event][module]" => "elasticsearch"
	  "[event][dataset]" => "index_stats"
	}	
  }
}
filter{
  if [index] =~ /^\..*/ and !([index] =~ /^\.ds.*/){
    drop {
      id => "DROP-Drop-indices-stars-with-dot" 	
	}
  }
  de_dot {
    id => "DE_DOT-Dot-to-underscore" 
    nested => false
  }
  
  ruby {
    id => "RUBY-Generate-index-pattern"
    code => '
       doc = event.get("index")
	   if doc != nil
          datePattern = /(\.|-|_)(20(\d){2}(\.|-)(\d){1,2}(\.|-)(\d){1,3})|(\.|-|_)(20(\d){2}(\.|-)(\d){1,2})/
          numberPattern = /((-?)(\d){4,15}(-?))/
          
		  if doc.match(datePattern)
              date_pattern = doc.match(datePattern).to_s
              splatedIndex = doc.split(date_pattern)
     	      event.set("[elasticsearch][index][index_pattern]", splatedIndex[0])
          elsif doc.match(numberPattern)
              splatedIndex = doc.split(numberPattern)
     	      event.set("[elasticsearch][index][index_pattern]", splatedIndex[0])
          else
            event.set("[elasticsearch][index][index_pattern]", doc)
          end
	   end
    '
  }
  
  aggregate {
     id => "AGGREGATE-Calculate-rates"
     task_id => "%{uuid}"
     code => "
	    require 'date';
		#Date in seconds
		sample_date = Time.now.to_i;
		event.set('sample_date', sample_date);

		#Calculate rates 
		if 	map.key?('last_sample_date')
		  date_diff = ( sample_date - map['last_sample_date'] )

		  event.set('[elasticsearch][index][total][docs][ingest_rate]', map.key?('last_docs_count') ? ((event.get('docs_count').to_i - map['last_docs_count']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][total][store][ingest_rate]', map.key?('last_store_size') ? ((event.get('store_size').to_i - map['last_store_size']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][total][indexing][index_failed]', map.key?('last_indexing_index_failed') ? ((event.get('indexing_index_failed').to_i - map['last_indexing_index_failed']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][total][indexing][delete_rate]', map.key?('last_indexing_delete_total') ? ((event.get('indexing_delete_total').to_i - map['last_indexing_delete_total']) / date_diff).ceil : 0);

		  event.set('[elasticsearch][index][total][indexing][index_last_period]', map.key?('last_indexing_index_total') ? (event.get('indexing_index_total').to_i - map['last_indexing_index_total']) : 0);
		  event.set('[elasticsearch][index][total][indexing][index_rate]', event.get('[elasticsearch][index][total][indexing][index_last_period]') > 0 ? ( event.get('[elasticsearch][index][total][indexing][index_last_period]') / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][total][indexing][index_latency]', event.get('[elasticsearch][index][total][indexing][index_last_period]') > 0 ? ((event.get('indexing_index_time').to_i - map['last_indexing_index_time']) / event.get('[elasticsearch][index][total][indexing][index_last_period]')) : 0);

		  event.set('[elasticsearch][index][total][search][query_last_period]', map.key?('last_search_query_total') ? (event.get('search_query_total').to_i - map['last_search_query_total']) : 0);
		  event.set('[elasticsearch][index][total][search][query_rate]', event.get('[elasticsearch][index][total][search][query_last_period]') > 0 ? (event.get('[elasticsearch][index][total][search][query_last_period]') / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][total][search][query_latency]', event.get('[elasticsearch][index][total][search][query_last_period]') > 0 ? ((event.get('search_query_time').to_i - map['last_search_query_time']) / event.get('[elasticsearch][index][total][search][query_last_period]')) : 0);

		  event.set('[elasticsearch][index][total][search][fetch_last_period]', map.key?('last_search_fetch_total') ? (event.get('search_fetch_total').to_i - map['last_search_fetch_total']) : 0);
		  event.set('[elasticsearch][index][total][search][fetch_rate]', event.get('[elasticsearch][index][total][search][fetch_last_period]') > 0 ? ( event.get('[elasticsearch][index][total][search][fetch_last_period]') / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][total][search][fetch_latency]', event.get('[elasticsearch][index][total][search][fetch_last_period]') > 0 ? ((event.get('search_fetch_time').to_i - map['last_search_fetch_time']) / event.get('[elasticsearch][index][total][search][fetch_last_period]')) : 0);
		  
		  event.set('[elasticsearch][index][primaries][docs][ingest_rate]', map.key?('last_pri_docs_count') ? ((event.get('pri_docs_count').to_i - map['last_pri_docs_count']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][primaries][store][ingest_rate]', map.key?('last_pri_store_size') ? ((event.get('pri_store_size').to_i - map['last_pri_store_size']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][primaries][indexing][index_failed]', map.key?('last_pri_indexing_index_failed') ? ((event.get('pri_indexing_index_failed').to_i - map['last_pri_indexing_index_failed']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][primaries][indexing][delete_rate]', map.key?('last_pri_indexing_delete_total') ? ((event.get('pri_indexing_delete_total').to_i - map['last_pri_indexing_delete_total']) / date_diff).ceil : 0);

		  event.set('[elasticsearch][index][primaries][indexing][index_last_period]', map.key?('last_pri_indexing_index_total') ? (event.get('pri_indexing_index_total').to_i - map['last_pri_indexing_index_total']) : 0);
		  event.set('[elasticsearch][index][primaries][indexing][index_rate]', event.get('[elasticsearch][index][primaries][indexing][index_last_period]') > 0 ? ( event.get('[elasticsearch][index][primaries][indexing][index_last_period]') / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][primaries][indexing][index_latency]', event.get('[elasticsearch][index][primaries][indexing][index_last_period]') > 0 ? ((event.get('pri_indexing_index_time').to_i - map['last_pri_indexing_index_time']) / event.get('[elasticsearch][index][primaries][indexing][index_last_period]')) : 0);

		  event.set('[elasticsearch][index][primaries][search][query_last_period]', map.key?('last_pri_search_query_total') ? (event.get('search_query_total').to_i - map['last_pri_search_query_total']) : 0);
		  event.set('[elasticsearch][index][primaries][search][query_rate]', event.get('[elasticsearch][index][primaries][search][query_last_period]') > 0 ? (event.get('[elasticsearch][index][primaries][search][query_last_period]') / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][primaries][search][query_latency]', event.get('[elasticsearch][index][primaries][search][query_last_period]') > 0 ? ((event.get('pri_search_query_time').to_i - map['last_pri_search_query_time']) / event.get('[elasticsearch][index][primaries][search][query_last_period]')) : 0);

		  event.set('[elasticsearch][index][primaries][search][fetch_last_period]', map.key?('last_pri_search_fetch_total') ? (event.get('pri_search_fetch_total').to_i - map['last_pri_search_fetch_total']) : 0);
		  event.set('[elasticsearch][index][primaries][search][fetch_rate]', event.get('[elasticsearch][index][primaries][search][fetch_last_period]') > 0 ? ( event.get('[elasticsearch][index][primaries][search][fetch_last_period]') / date_diff).ceil : 0);
		  event.set('[elasticsearch][index][primaries][search][fetch_latency]', event.get('[elasticsearch][index][primaries][search][fetch_last_period]') > 0 ? ((event.get('pri_search_fetch_time').to_i - map['last_pri_search_fetch_time']) / event.get('[elasticsearch][index][primaries][search][fetch_last_period]')) : 0);

          event.set('[elasticsearch][index][shards][total]', (event.get('pri').to_i + (event.get('pri').to_i * event.get('rep').to_i)));
		  
		  map['first_doc'] = false;
		else
		  map['first_doc'] = true;
		end
		
		map['last_sample_date'] =  sample_date;

		#Define the values for the next document
        map['last_docs_count'] =  event.get('docs_count').to_i;
        map['last_store_size'] =  event.get('store_size').to_i;
        map['last_indexing_index_time'] =  event.get('indexing_index_time').to_i;
        map['last_indexing_index_failed'] =  event.get('indexing_index_failed').to_i;
        map['last_indexing_delete_total'] =  event.get('indexing_delete_total').to_i;
        map['last_indexing_index_total'] =  event.get('indexing_index_total').to_i;
        map['last_search_query_time'] =  event.get('search_query_time').to_i;
        map['last_search_query_total'] =  event.get('search_query_total').to_i;
        map['last_search_fetch_time'] =  event.get('search_fetch_time').to_i;
        map['last_search_fetch_total'] =  event.get('search_fetch_total').to_i;
 
        map['last_pri_docs_count'] =  event.get('pri_docs_count').to_i;
        map['last_pri_store_size'] =  event.get('pri_store_size').to_i;
        map['last_pri_indexing_index_time'] =  event.get('pri_indexing_index_time').to_i;
        map['last_pri_indexing_index_failed'] =  event.get('pri_indexing_index_failed').to_i;
        map['last_pri_indexing_delete_total'] =  event.get('pri_indexing_delete_total').to_i;
        map['last_pri_indexing_index_total'] =  event.get('pri_indexing_index_total').to_i;		
        map['last_pri_search_query_time'] =  event.get('pri_search_query_time').to_i;
        map['last_pri_search_query_total'] =  event.get('pri_search_query_total').to_i;
        map['last_pri_search_fetch_time'] =  event.get('pri_search_fetch_time').to_i;
        map['last_pri_search_fetch_total'] =  event.get('pri_search_fetch_total').to_i;
		
	   #Drop document if there is no preview documents.
		if map['first_doc']
		  event.cancel();
		end
     "
     timeout => 3000000
     push_map_as_event_on_timeout => false
  }
  
  mutate {
    id => "MUTATE-Rename-fields-to-ecs"
    rename => {
	  "node_name" => "[elasticsearch][node][name]"
	  "node_id" => "[elasticsearch][node][id]"
	  "ip" => "[elasticsearch][node][ip]"
	  "port" => "[elasticsearch][node][port]"
	  "pid" => "[elasticsearch][node][pid]"
      "index" => "[elasticsearch][index][name]"
      "uuid" => "[elasticsearch][index][uuid]"
	  "creation_date" => "[elasticsearch][index][created]"	 
	  "health" => "[elasticsearch][index][health]"
	  "pri" => "[elasticsearch][index][shards][primaries]"
      "rep" => "[elasticsearch][index][shards][replica]"

	  "docs_count" => "[elasticsearch][index][total][docs][count]"
	  "store_size" => "[elasticsearch][index][total][store][size_in_bytes]"
	  "indexing_index_time" => "[elasticsearch][index][total][indexing][index_time_in_millis]"
	  "indexing_index_failed" => "[elasticsearch][index][total][indexing][failed_total]"
	  "indexing_delete_total" => "[elasticsearch][index][total][indexing][delete_total]"
	  "indexing_index_total" => "[elasticsearch][index][total][indexing][index_total]"
	  "search_query_total" => "[elasticsearch][index][total][search][query_total]"
	  "search_query_time" => "[elasticsearch][index][total][search][query_time_in_millis]"
	  "search_fetch_total" => "[elasticsearch][index][total][search][fetch_total]"
	  "search_fetch_time" => "[elasticsearch][index][total][search][fetch_time_in_millis]"

	  "pri_docs_count" => "[elasticsearch][index][primaries][docs][count]"
	  "pri_store_size" => "[elasticsearch][index][primaries][store][size_in_bytes]"
	  "pri_indexing_index_time" => "[elasticsearch][index][primaries][indexing][index_time_in_millis]"
	  "pri_indexing_index_failed" => "[elasticsearch][index][primaries][indexing][failed_total]"
	  "pri_indexing_delete_total" => "[elasticsearch][index][primaries][indexing][delete_total]"
	  "pri_indexing_index_total" => "[elasticsearch][index][primaries][indexing][index_total]"
	  "pri_search_query_total" => "[elasticsearch][index][primaries][search][query_total]"
	  "pri_search_query_time" => "[elasticsearch][index][primaries][search][query_time_in_millis]"
	  "pri_search_fetch_total" => "[elasticsearch][index][primaries][search][fetch_total]"
	  "pri_search_fetch_time" => "[elasticsearch][index][primaries][search][fetch_time_in_millis]"

	  "get_total" => "[elasticsearch][index][total][get][total]"
	  "get_current" => "[elasticsearch][index][total][get][current]"
      "refresh_total" => "[elasticsearch][index][total][refresh][total]"
	  "indexing_index_current" => "[elasticsearch][index][total][indexing][index_current]"	
	  "get_missing_time" => "[elasticsearch][index][total][get][missing_time]"
      "request_cache_evictions" => "[elasticsearch][index][total][request_cache][evictions]"
      "merges_current" => "[elasticsearch][index][total][merges][current]"

	  "pri_get_total" => "[elasticsearch][index][primaries][get][total]"
	  "pri_get_current" => "[elasticsearch][index][primaries][get][current]"
      "pri_refresh_total" => "[elasticsearch][index][primaries][refresh][total]"
	  "pri_indexing_index_current" => "[elasticsearch][index][primaries][indexing][index_current]"	  
	  "pri_get_missing_time" => "[elasticsearch][index][primaries][get][missing_time]"
      "pri_request_cache_evictions" => "[elasticsearch][index][primaries][request_cache][evictions]"
      "pri_merges_current" => "[elasticsearch][index][primaries][merges][current]"
	  "status" => "[elasticsearch][index][status]"
	}
	remove_field => ["@version"]
  }
  
  ruby {
    id => "RUBY-Move-all-not-parsed-fields-to-the-elasticsearch.field"
    code => '
        hash = event.to_hash
        hash.each do |k, value|
          if !k.include? "elasticsearch" and !k.include? "timestamp" and !k.include? "@timestamp" and !k.include? "event"
            event.set("[elasticsearch][#{k}]", value)
            event.remove("[#{k}]")
          end
        end
    '
  }

}
output{
  if [elasticsearch][cluster][id] {
    elasticsearch {
      id => "es-output-send-to-index-stats-historical-index"
      hosts => ["<MON_HOST>"]
      user => "<MON_USER>"
      password => "<MON_PASSWORD>"
      ssl_enabled => <MON_SSL_ENABLED>
  	  ssl_verification_mode => none

      index => "dbeast-mon-tsds-es-index-stats"
      action => "create"
  	  manage_template => false
    }
    elasticsearch {
      id => "es-output-send-to-index-stats-status-index"
      hosts => ["<MON_HOST>"]
      user => "<MON_USER>"
      password => "<MON_PASSWORD>"
      ssl_enabled => <MON_SSL_ENABLED>
  	  ssl_verification_mode => none

      index => "dbeast-mon-index-es-index-stats-status"
  	  document_id => "%{[elasticsearch][index][uuid]}"
  	  manage_template => false
    }
  }
  else {
    elasticsearch {
      id => "es-output-send-to-corrupted-data"
  	  hosts => ["<MON_HOST>"]
  	  user => "<MON_USER>"
  	  password => "<MON_PASSWORD>"

  	  ssl_enabled => <MON_SSL_ENABLED>
  	  ssl_verification_mode => none
      index => "dbeast-mon-index-corrupted-data"
  	  manage_template => false
    }
  }
}
