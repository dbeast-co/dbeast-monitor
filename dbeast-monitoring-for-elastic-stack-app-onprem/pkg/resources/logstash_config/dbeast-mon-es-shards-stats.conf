input{
  http_poller {
    id => "Input-get-cat-shards-from-ES" 
    urls => {
      lab => "<PROD_HOST>/_cat/shards?bytes=b&time=ms&format=json&h=index,shard,prirep,state,docs,store,ip,id,node,indexing*,search*,get*,query_cache*,unassigned*"
    }
	user => "<PROD_USER>"
	password => "<PROD_PASSWORD>"
	
    request_timeout => 60
    schedule => { "cron" => "* * * * *"}
    codec => "json"
    ssl_verification_mode => "none"
    add_field => {
	  "[elasticsearch][cluster][id]" => "<CLUSTER_ID>"
	  "[event][module]" => "elasticsearch"
	  "[event][dataset]" => "shards_stats"
	}	
  }
}
filter{
  if [index] =~ /^\..*/ and !([index] =~ /^\.ds.*/) {
    drop {}
  }
  mutate {
   remove_field => ["[event][original]"]
  }

###  Generate index pattern
  ruby {
    id=>"RUBY-Generate-index-pattern"
    code => '
       doc = event.get("index")
	   if doc != nil
          datePattern = /(\.|-|_)(20(\d){2}(\.|-)(\d){1,2}(\.|-)(\d){1,3})|(\.|-|_)(20(\d){2}(\.|-)(\d){1,2})/
          numberPattern = /((-?)(\d){4,15}(-?))/
		  if doc.match(datePattern)
              date_pattern = doc.match(datePattern).to_s
              splatedIndex = doc.split(date_pattern)
     	      event.set("[elasticsearch][index][index_pattern]", splatedIndex[0])
          elsif doc.match(numberPattern)
              splatedIndex = doc.split(numberPattern)
     	      event.set("[elasticsearch][index][index_pattern]", splatedIndex[0])
          else
            event.set("[elasticsearch][index][index_pattern]", doc)
          end
	   end
    '
  }
  ruby{
    id => "RUBY-Dot-fields-to-json"
    code => '
	  doc = event.to_hash;
	  doc.each do |doc_key, doc_value|
	    if doc_key.include? "."
          event_key = doc_key.split(".").reverse.inject("") do |value, key|
		    value = "[" + key + "]" + value;
          end
          event.set(event_key, doc_value);
		  event.remove(doc_key);
        end
	  end
	'
  }

  if "p" in [prirep] {
      mutate { add_field => { "[elasticsearch][shard][primary]" => true }}
  }
  else { 
	mutate { add_field => { "[elasticsearch][shard][primary]" => false }}
  }

 
	
  mutate {
    rename => {
      "index" => "[elasticsearch][index][name]"
	  "shard" => "[elasticsearch][shard][number]"
	  "state" => "[elasticsearch][shard][state]"
      "docs" => "[elasticsearch][shard][docs][count]"
	  "store" => "[elasticsearch][shard][store][size_in_bytes]"
	  "ip" => "[elasticsearch][node][ip]"
	  "node" => "[elasticsearch][node][name]"
	  "id" => "[elasticsearch][node][id]" 
      "indexing" => "[elasticsearch][shard][indexing]"
      "search" => "[elasticsearch][shard][search]"
	  "get" => "[elasticsearch][shard][get]"
	  "query_cache" => "[elasticsearch][shard][query_cache]"
	  "unassigned" => "[elasticsearch][shard][unassigned]"
	}
	remove_field => ["@version","prirep"]
  } 
  
#### Calculate rates  
  aggregate {
     task_id => "%{[elasticsearch][cluster][id]}:%{[elasticsearch][index][name]}:%{[elasticsearch][shard][number]}:%{[elasticsearch][shard][primary]}"
     code => "
	    require 'date';
		#Date in seconds
		sample_date = Time.now.to_i;
		event.set('sample_date', sample_date);

		#Calculate rates 
		if 	map.key?('last_sample_date')
		  date_diff = ( sample_date - map['last_sample_date'] )
		  event.set('date_diff', date_diff)

		  event.set('[elasticsearch][shard][docs][ingest_rate]', map.key?('last_docs_count') ? ((event.get('[elasticsearch][shard][docs][count]').to_i - map['last_docs_count']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][store][ingest_rate]', map.key?('last_store_size') ? ((event.get('[elasticsearch][shard][store][size_in_bytes]').to_i - map['last_store_size']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][indexing][index_rate]', map.key?('last_indexing_index_total') ? ((event.get('[elasticsearch][shard][indexing][index_total]').to_i - map['last_indexing_index_total']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][indexing][index_last_period]', map.key?('last_indexing_index_total') ? (event.get('[elasticsearch][shard][indexing][index_total]').to_i - map['last_indexing_index_total']) : 0);
		  event.set('[elasticsearch][shard][indexing][index_failed_rate]', map.key?('last_indexing_index_failed') ? ((event.get('[elasticsearch][shard][indexing][index_failed]').to_i - map['last_indexing_index_failed']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][indexing][delete_rate]', map.key?('last_indexing_delete_total') ? ((event.get('[elasticsearch][shard][indexing][delete_total]').to_i - map['last_indexing_delete_total']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][search][query_rate]', map.key?('last_search_query_total') ? ((event.get('[elasticsearch][shard][search][query_total]').to_i - map['last_search_query_total']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][search][query_last_period]', map.key?('last_search_query_total') ? (event.get('[elasticsearch][shard][search][query_total]').to_i - map['last_search_query_total']) : 0);
		  event.set('[elasticsearch][shard][search][fetch_rate]', map.key?('last_search_fetch_total') ? ((event.get('[elasticsearch][shard][search][fetch_total]').to_i - map['last_search_fetch_total']) / date_diff).ceil : 0);
		  event.set('[elasticsearch][shard][search][fetch_last_period]', map.key?('last_search_fetch_total') ? (event.get('[elasticsearch][shard][search][fetch_total]').to_i - map['last_search_fetch_total']) : 0);

		  event.set('[elasticsearch][shard][search][fetch_latency]', (map.key?('last_search_fetch_time') and event.get('[elasticsearch][shard][search][fetch_last_period]') > 0 ) ? ((event.get('[elasticsearch][shard][search][fetch_time]').to_i - map['last_search_fetch_time']) / event.get('[elasticsearch][shard][search][fetch_last_period]').to_i) : 0);
		  event.set('[elasticsearch][shard][search][query_latency]', (map.key?('last_search_query_time') and event.get('[elasticsearch][shard][search][query_last_period]') > 0 )? ((event.get('[elasticsearch][shard][search][query_time]').to_i - map['last_search_query_time']) / event.get('[elasticsearch][shard][search][query_last_period]').to_i) : 0);
		  event.set('[elasticsearch][shard][indexing][index_latency]', (map.key?('last_indexing_index_time') and event.get('[elasticsearch][shard][indexing][index_last_period]') > 0 )? ((event.get('[elasticsearch][shard][indexing][index_time]').to_i - map['last_indexing_index_time']) / event.get('[elasticsearch][shard][indexing][index_last_period]').to_i) : 0);
		  
		  map['first_doc'] = false;
		else
		  map['first_doc'] = true;
		end
		
		map['last_sample_date'] =  sample_date;

		#Define the values for the next document
        map['last_docs_count'] =  event.get('[elasticsearch][shard][docs][count]').to_i;
        map['last_store_size'] =  event.get('[elasticsearch][shard][store][size_in_bytes]').to_i;
        map['last_indexing_index_time'] =  event.get('[elasticsearch][shard][indexing][index_time]').to_i;
        map['last_indexing_index_failed'] =  event.get('[elasticsearch][shard][indexing][index_failed]').to_i;
        map['last_indexing_delete_total'] =  event.get('[elasticsearch][shard][indexing][delete_total]').to_i;
        map['last_indexing_index_total'] =  event.get('[elasticsearch][shard][indexing][index_total]').to_i;
        map['last_search_query_time'] =  event.get('[elasticsearch][shard][search][query_time]').to_i;
        map['last_search_query_total'] =  event.get('[elasticsearch][shard][search][query_total]').to_i;
        map['last_search_fetch_total'] =  event.get('[elasticsearch][shard][search][fetch_total]').to_i;
        map['last_search_fetch_time'] =  event.get('[elasticsearch][shard][search][fetch_time]').to_i;
		
	   #Drop document if there is no preview documents.
		if map['first_doc']
		  event.cancel();
		end
     "
     timeout => 3000000
     push_map_as_event_on_timeout => false
  }
}
output{
  if [elasticsearch][cluster][id] {
    elasticsearch {
  	  id => "es-output-send-to-mon-es-shard-stats-historical-index"
  	  hosts => ["<MON_HOST>"]
  	  user => "<MON_USER>"
  	  password => "<MON_PASSWORD>"

      ssl_enabled => <MON_SSL_ENABLED>
  	  ssl_verification_mode => none
      index => "dbeast-mon-tsds-es-shards-stats"
      action => "create"
  	  manage_template => false
    }
    elasticsearch {
  	  id => "es-output-send-to-mon-es-shard-stats-status-index"
  	  hosts => ["<MON_HOST>"]
  	  user => "<MON_USER>"
  	  password => "<MON_PASSWORD>"

      ssl_enabled => <MON_SSL_ENABLED>
  	  ssl_verification_mode => none
      document_id => "%{[elasticsearch][cluster][id]}:%{[elasticsearch][index][name]}:%{[elasticsearch][shard][number]}:%{[elasticsearch][shard][primary]}"
      index => "dbeast-mon-index-es-shards-stats-status"
  	  manage_template => false
    }
  }
  else {
    elasticsearch {
      id => "es-output-send-to-corrupted-data"
  	  hosts => ["<MON_HOST>"]
  	  user => "<MON_USER>"
  	  password => "<MON_PASSWORD>"

  	  ssl_enabled => <MON_SSL_ENABLED>
  	  ssl_verification_mode => none
      index => "dbeast-mon-index-corrupted-data"
  	  manage_template => false
    }
  }
}
