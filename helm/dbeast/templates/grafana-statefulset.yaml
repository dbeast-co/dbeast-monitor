apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-grafana
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-grafana
    spec:
      initContainers:
      - name: grafana-init
        image: {{ .Values.grafana.image }}
        command:
          - sh
          - -c
          - |
            if [ -z "$(ls -A /tmp/grafana)" ]; then
              echo "Persistent volume is empty. Copying data from image..."
              cp -R /var/lib/grafana/* /tmp/grafana/
            else
              echo "Persistent volume is not empty. Skipping data copy."
            fi
        volumeMounts:
        - name: grafana-storage
          mountPath: /tmp/grafana

      - name: install-dbeast-plugin
        image: curlimages/curl:7.85.0
        securityContext:
          runAsUser: 0
        command:
          - sh
          - -c
          - |
            curl -L -o /tmp/dbeast-monitor-plugin.tar.gz {{ .Values.grafana.pluginUrl }}
            mkdir -p /var/lib/grafana/plugins/dbeast-dbeastmonitor-app
            tar -xvzf /tmp/dbeast-monitor-plugin.tar.gz -C /var/lib/grafana/plugins
        volumeMounts:
        - name: grafana-plugins
          mountPath: /var/lib/grafana/plugins

      containers:
      - name: grafana
        securityContext:
          runAsUser: 0
        image: {{ .Values.grafana.image }}
        ports:
        - containerPort: 3000
        env:
        {{- range .Values.grafana.env }}
        - name: {{ .name }}
          value: {{ .value }}
        {{- end }}
        volumeMounts:
          - name: grafana-config
            mountPath: /etc/grafana
          - name: grafana-logs
            mountPath: /var/log/grafana
          - name: grafana-storage
            mountPath: /var/lib/grafana
          - name: grafana-plugins
            mountPath: /var/lib/grafana/plugins
          - name: logstash-config
            mountPath: /opt/dbeast/logstash/config
        {{- range .Values.grafana.volumes }}
          - name: {{ .name }}
            mountPath: {{ .mountPath }}
            {{- if .subPath }}
            subPath: {{ .subPath }}
            {{- end }}
        {{- end }}
        #Run lifecycle if this is new installation
        lifecycle:
          postStart:
            exec:
              command: [ "/bin/sh", "-c", "sleep 30; curl -X POST -H 'Content-Type: application/json' -d '{\"enabled\": true}' -H 'Authorization: Basic YWRtaW46YWRtaW4=' http://localhost:3000/api/plugins/dbeast-dbeastmonitor-app/settings" ]
      volumes:
        - name: grafana-config
          configMap:
            name: {{ .Release.Name }}-grafana-config
        - name: grafana-logs
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-grafana-logs-pvc
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-grafana-pvc
        - name: grafana-plugins
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-grafana-plugins-pvc
        - name: logstash-config
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-logstash-config-pvc
      {{- range .Values.grafana.volumes }}
        - name: {{ .name }}
          {{- if .source.configMap }}
          configMap:
            name: {{ .source.configMap.name }}
          {{- else if .source.persistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: {{ .source.persistentVolumeClaim.claimName }}
          {{- end }}
      {{- end }}
