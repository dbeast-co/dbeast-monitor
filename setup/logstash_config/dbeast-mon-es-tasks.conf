input {
    http_poller {
    id => "INPUT-get-tasks"
    urls => {
      lab => "<PROD_HOST>/_cat/tasks?format=json&detailed=true&time=ms"
    }
	user => "<PROD_USER>"
	password => "<PROD_PASSWORD>"
	
    request_timeout => 60
    schedule => { "cron" => "* * * * *"}
    codec => "json"
    ssl_verification_mode => "none"
    add_field => {
	  "[elasticsearch][cluster][id]" => "<CLUSTER_ID>"
	  "[event][module]" => "elasticsearch"
	  "[event][dataset]" => "tasks"
	}
  }
}
filter {
    if "bulk" in [action] {
	  mutate {
	    id => "MUTATE-set-write_task-tag"
	    add_field => {
		  "[metricset][name]" => "write_task"
		}
	  }
	} 
	else if "search" in [action] {
	  mutate {
	  	id => "MUTATE-set-search_task-tag"
	    add_field => {
		  "[metricset][name]" => "search_task"
		}
	  }
	} 
	else if "ml" in [action] {
	  mutate {
	    id => "MUTATE-set-ml_task-tag"
	    add_field => {
		  "[metricset][name]" => "ml_task"
		}
	  }
	}
	else if "esql" in [action] {
	  mutate {
	    id => "MUTATE-set-esql_task-tag"
	    add_field => {
		  "[metricset][name]" => "esql_task"
		}
	  }
	}
	else {
	  mutate {
	  	id => "MUTATE-set-general-tag"
	    add_field => {
		  "[metricset][name]" => "general"
		}
	  }
	}


	if "search_task" in [metricset][name]{
      if "indices" in [description] {
        grok {
     	id => "GROK-parse-search-tasks-description"
          match => {
            "[description]"=> [
               "indices\[%{DATA:[elasticsearch][task][request][index_list]}\], types\[%{DATA:[elasticsearch][task][request][types]}\], search_type\[%{DATA:[elasticsearch][task][request][search_type]}\], source\[%{DATA:[elasticsearch][task][request][query]}\]$",
               "indices\[%{DATA:[elasticsearch][task][request][index_list]}\], search_type\[%{DATA:[elasticsearch][task][request][search_type]}\], source\[%{DATA:[elasticsearch][task][request][query]}\], preference",
               "indices\[%{DATA:[elasticsearch][task][request][index_list]}\], search_type\[%{DATA:[elasticsearch][task][request][search_type]}\], source\[%{DATA:[elasticsearch][task][request][query]}\]$",
			   "async_search\{indices\[%{DATA:[elasticsearch][task][request][index_list]}\], search_type\[%{DATA:[elasticsearch][task][request][search_type]}\], source\[%{DATA:[elasticsearch][task][request][query]}\]}$"
            ]
          }
        }
      }
	  else if "shardIds" in [description]{
	    grok {
     	  id => "GROK-parse-search-tasks-description-with-shardIds"
          match => {
            "[description]"=> [
 			   "shardIds\[\[%{GREEDYDATA:[elasticsearch][task][request][index_list]}\]\]"
            ]
          }
        }
		mutate {
		  id => "GSUB-Remove-shard-number"
          gsub => [
            "[elasticsearch][task][request][index_list]", "\]\[\d+\]", ""
          ]
        }
		mutate {
		  id => "GSUB-Remove-["
          gsub => [
            "[elasticsearch][task][request][index_list]", "\[", ""
          ]
        }
	  }
	  else if "shardId" in [description]{
	    grok {
     	id => "GROK-parse-search-tasks-description-with-shardId"
          match => {
            "[description]"=> [
 			   "shardIds\[\[\[%{DATA:[elasticsearch][task][request][index_list]}\]\[%{NUMBER:[elasticsearch][task][request][shard_number]}\]\]\]",
 			   "shardId\[\[%{DATA:[elasticsearch][task][request][index_list]}\]\[%{NUMBER:[elasticsearch][task][request][shard_number]}\]\]",
			   "%{SPACE}shardId\[\[%{DATA:[elasticsearch][task][request][index_list]}%{NUMBER:[elasticsearch][task][request][shard_number]}\]\]%{SPACE}"
            ]
          }
        }
	  }
    }
	else if "write_task" in [metricset][name]{
      grok {
     	id => "GROK-parse-write-tasks-description"
        match => {
          "[description]"=> [
             "requests\[%{NUMBER:[elasticsearch][task][request][bulk_size]}\],%{SPACE}index\[%{DATA:[elasticsearch][task][request][index_list]}\]\[%{NUMBER:[elasticsearch][task][request][shard_number]}\]",
             "requests\[%{NUMBER:[elasticsearch][task][request][bulk_size]}\], indices\[%{DATA:[elasticsearch][task][request][index_list]}\]"
          ]
        }
      }
	}
	else if "esql_task" in [metricset][name]{
      grok {
     	id => "GROK-parse-esql-tasks-description"
        match => {
          "[description]"=> [
             "^from%{SPACE}%{DATA:[elasticsearch][task][request][index_list]}\|%{GREEDYDATA:[elasticsearch][task][request][query]}"
          ]
        }
      }

	}


    if [elasticsearch][task][request][index_list] {
      mutate {
	  	id => "MUTATE-split-indices-to-list"
        split => {
          "[elasticsearch][task][request][index_list]" => ","
        }
      }
	  mutate {
	  	id => "MUTATE-strip-indices"
        strip => [
          "[elasticsearch][task][request][index_list]"
        ]
      }
	  ruby {
		id => "RUBY-extract-index-pattern"
        code => '
          index_list = event.get("[elasticsearch][task][request][index_list]")
          if index_list != nil && index_list.length > 0
		    datePattern = /(\.|-|_)(20(\d){2}(\.|-)(\d){1,2}(\.|-)(\d){1,3})|(\.|-|_)(20(\d){2}(\.|-)(\d){1,2})/
            numberPattern = /((-?)(\d){4,15}(-?))/
            event.set("[elasticsearch][task][request][index_number]", index_list.length)
            result_set = Set.new
            index_list.each do | doc |
              if doc.match(datePattern)
                date_pattern = doc.match(datePattern).to_s
                splatedIndex = doc.split(date_pattern)
                result_set.add(splatedIndex[0])
              elsif doc.match(numberPattern)
                splatedIndex = doc.split(numberPattern)
                result_set.add(splatedIndex[0])
              else
                result_set.add(doc)
              end
            end
          event.set("[elasticsearch][task][request][index_pattern]", result_set.to_a)
          end
        '
      }
    }

    if [elasticsearch][task][request][query] and "esql_task" not in [metricset][name] {
      json {
	  	id => "JSON-parse-query-to-json"
        source => "[elasticsearch][task][request][query]"
        target => "[tmp][query]"
      }
      if "_jsonparsefailure" not in [tags] {
	    ruby {
		  id => "RUBY-extract-query-and-aggregation"
          code => '
		    event.set("[elasticsearch][task][query][query]", event.get("[tmp][query][query]").to_s)
            event.set("[elasticsearch][task][query][sort]", event.get("[tmp][query][sort]").to_s)
            agg = event.get("[tmp][query][aggregations]").to_s
            if agg
              event.set("[elasticsearch][task][query][aggregations]", agg)
              event.set("[elasticsearch][task][query][aggregations_levels]", agg.split("aggregations").size)
            end
          '
        }

  	    if [elasticsearch][task][query][query] {
  	      fingerprint {
  		    id => "FINGERPRINT-generate-fingerprint-based-on-query"
            source => ["[elasticsearch][task][query][query]"]
    	    target => "[elasticsearch][task][query][query_uid]"
          }
  	    }
      }
    }

    mutate {
	  id => "MUTATE-remove-agent-and-tmp-query"
      rename => {
        "parent_task_id" => "[elasticsearch][task][parent_task_id]"
        "ip" => "[elasticsearch][task][ip]"
        "description" => "[elasticsearch][task][description]"
        "task_id" => "[elasticsearch][task][task_id]"
        "start_time" => "[elasticsearch][task][start_time]"
        "node" => "[elasticsearch][task][node]"
        "type" => "[elasticsearch][task][type]"
        "running_time" => "[elasticsearch][task][running_time]"
        "action" => "[elasticsearch][task][action]"
        "timestamp" => "[elasticsearch][task][timestamp]"
      }
      remove_field => ["agent", "tmp"]
    }
}
output {
  elasticsearch {
	id => "ELASTICSEARCH-MON-ingest-es-tasks"
	hosts => ["<MON_HOST>"]
	user => "<MON_USER>"
	password => "<MON_PASSWORD>"

    ssl_enabled => <MON_SSL_ENABLED>
	ssl_verification_mode => none
	document_id => "%{[elasticsearch][task][task_id]}"
    index => "dbeast-mon-index-es-tasks"
  }
}